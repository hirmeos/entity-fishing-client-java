buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'net.researchgate', name: 'gradle-release', version: '2.6.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'net.researchgate.release'

group = "com.scienceminer.nerd"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/rookies/maven" }
}

dependencies {
    //Tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.easymock:easymock:3.4'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    //Apache commons
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation 'org.apache.commons:commons-lang3:3.0.1'
    implementation 'commons-io:commons-io:2.6'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'org.apache.httpcomponents:httpclient:4.5.6'
    implementation 'org.apache.httpcomponents:httpmime:4.5.6'
    implementation 'org.apache.httpcomponents:httpasyncclient:4.1.2'

    //Logging
    implementation 'org.slf4j:slf4j-log4j12:1.7.25'

    //JSON
//    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
//    implementation 'com.fasterxml.jackson.core:jackson-mapper-asl:2.9.1'

//    implementation 'org.springframework:spring-test'
//    implementation 'org.springframework.boot:spring-boot-test:1.5.2.RELEASE'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task mainJar(type: ShadowJar, group: 'test') {
    zip64 true
    from sourceSets.main.output
    from {
        project.configurations.compile.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

shadowJar {
    classifier = 'onejar'
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.NERMain'
    }
}

jar {
    dependsOn mainJar
    enabled false
}

artifacts {
    archives shadowJar
    archives mainJar
}

uploadArchives {
    // if you want to enable uploading to some maven repo, add those properties to ~/.gradle/gradle.properties, e.g.:
    /*
        mavenRepoUserName=maven_username
        mavenRepoPassword=super_secret
        mavenRepoReleasesUrl=https://nexus3.example.org/repository/maven-releases/
        mavenRepoSnapshotsUrl=https://nexus3.example.org/repository/maven-snapshots/
    */
    def user = project.hasProperty('mavenRepoUserName') ? project.findProperty('mavenRepoUserName') : ''
    def password = project.hasProperty('mavenRepoPassword') ? project.findProperty('mavenRepoPassword') : ''
    def rurl = project.hasProperty('mavenRepoReleasesUrl') ? project.findProperty('mavenRepoReleasesUrl') : ''
    def surl = project.hasProperty('mavenRepoSnapshotsUrl') ? project.findProperty('mavenRepoSnapshotsUrl') : ''

    repositories.mavenDeployer {
        repository(url: rurl) {
            authentication(userName: user, password: password)
        }
        snapshotRepository(url: surl) {
            authentication(userName: user, password: password)
        }

    }
}

bintray {
    dryRun = false // Whether to run this as dry-run, without deploying
    publish = true // If version should be auto published after an upload

    // read from ~/.gradle/gradle.properties. Set those up before releasing
    user = project.hasProperty('bintrayUser') ? bintrayUser : ''
    key = project.hasProperty('bintrayApiKey') ? bintrayApiKey : ''
    configurations = ['archives']
    pkg {
        name = 'grobid'
        repo = 'maven'
        userOrg = 'rookies'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/kermitt2/grobid'
        issueTrackerUrl = 'https://github.com/kermitt2/grobid/issues'
        githubRepo = 'kermitt2/grobid'

        version {
            name = rootProject.version
            vcsTag = rootProject.version
            released = new Date()
        }
    }
}

/*tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}*/




